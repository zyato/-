<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 配置整合 mybatis 过程 -->
    <!-- 配置数据库相关参数 ${}取值-->
    <context:property-placeholder location="classpath:jdbcConfig.properties"></context:property-placeholder>
    <!-- 配置数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="username" value="${jdbc.username}"></property>
        
        <!-- 连接池的私有属性 -->
        <property name="initialSize" value="2" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="30" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="6000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="connectionErrorRetryAttempts" value="3"/>
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>

    <!-- 配置 sqlSessionFactory 对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 配置 mybatis 全局配置文件：mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 扫描 entity 包，使用别名 -->
        <!-- 多个包时，可以把包路径拼接成一个串用分号分隔作为 value 的值：value="com.yato.entity;com.yato.pojo" -->
        <property name="typeAliasesPackage" value="com.yato.entity"></property>
        <!-- 扫描 sql 配置文件：mapper 需要的 xml 配置文件     -->
        <property name="mapperLocations" value="classpath*:com/yato/mapper/*.xml"></property>
    </bean>

    <!-- 配置扫描持久层接口的包，动态实现 dao 接口，注入到 spring 容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注意这里的 value 传入的是 sqlSessionFactory 对应 bean 的 id 的字符串，而非引用
            防止提前初始化 sqlSessionFactory ，因为有可能 DataSource 数据源为初始化完成
         -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 给出扫描 dao 接口的包 -->
        <property name="basePackage" value="com.yato.mapper"></property>
    </bean>
</beans>